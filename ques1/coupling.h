/*
 * coupling.h
 *
 *  Created on: 27-Feb-2017
 *      Author: slowb
 */

#ifndef COUPLING_H_
#define COUPLING_H_
#include "../headers/produceSample.h"
#include "../headers/utilFunc.h"
#include "../headers/common.h"
#include "../headers/couple.h"
#include "../headers/readBoyGirl.h"

/**
   *this method reads list of boys and girls from two .ssv files generated by produceSample() within same function
   * @param n is size of list generated  randomly by produceSample()
   * @return void
   */


void coupling(int n){
		produceSample(n);
		vector <Boy> boys_list= readBoy();
		vector <Girl> girls_list= readGirl();
		vector <couple> lucky_couples;
		sort(boys_list.begin(),boys_list.end(),comp_function_b);
		sort(girls_list.begin(),girls_list.end(),comp_function_g);

		cout<<endl;
		for (vector<Girl>::iterator it = girls_list.begin() ; it !=girls_list.end(); ++it){

						for (vector<Boy>::iterator b = boys_list.begin() ; b !=boys_list.end(); ++b){

										if((*b).commited()) continue;
										if((*b).budget >= (*it).budget && (*b).attrctvnss<=(*it).attrctvnss){
											(*b).set_commited();

											(*it).set_commited();
											couple C=couple((*b),(*it));
											lucky_couples.push_back(C);

											break;
										}
									}

					}
		ofstream file;
		file.open("log.ssv",ios::trunc);
		cout<<"log saved in log.ssv"<<endl;
		for (vector<couple>::iterator it = lucky_couples.begin() ; it !=lucky_couples.end(); ++it){
								couple c=*it;
								cout<<c.boy.name<<" "<<heart<<"  "<<c.girl.name<<endl;
								time_t now = c.timev;
								tm * ptm = localtime(&now);
								char buffer[32];
								std::strftime(buffer, 32, "%a, %d.%m.%Y %H:%M:%S", ptm);
								file<<buffer<<"\t"<<c.boy.name<<" "<<heart<<"  "<<c.girl.name<<" \t"<<endl;
		}
		file.close();
}





#endif /* COUPLING_H_ */
